name: CI para API de Predicción

# Dispara el workflow en cada push o pull request a la rama 'main'
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    # El tipo de máquina virtual en la que se ejecutará el job
    runs-on: ubuntu-latest

    steps:
      # 1. Clona tu repositorio en la máquina virtual
      - name: Checkout del repositorio
        uses: actions/checkout@v4

      # 2. Configura el entorno de Python
      - name: Configurar Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      # 3. Instala las dependencias necesarias para los tests
      - name: Instalar dependencias
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install requests flake8  # requests para test_api.py y flake8 para linting

      # 4. (Opcional pero recomendado) Revisa la calidad del código con Flake8
      - name: Linting con flake8
        run: |
          # Revisa errores de sintaxis o variables no definidas
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # Revisa el estilo del código sin detener el build (actúa como una advertencia)
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      # 5. Construye la imagen Docker a partir de tu Dockerfile
      - name: Construir imagen Docker
        run: docker build -t mi-api-prediccion .

      # 6. Ejecuta el contenedor Docker en segundo plano
      # -d: modo detached (segundo plano)
      # -p 8080:8080: mapea el puerto 8080 del contenedor al puerto 8080 de la máquina virtual
      - name: Ejecutar contenedor Docker
        run: docker run -d --name mi-api-container -p 8080:8080 mi-api-prediccion

      # 7. Espera a que la API se inicie completamente
      - name: Esperar a que la API esté lista
        run: |
          echo "Esperando 15 segundos a que el servidor se inicie..."
          sleep 15

      # 8. Ejecuta los tests de integración contra la API que corre en Docker
      - name: Ejecutar tests de la API
        run: python test_api.py

      # 9. (Paso de limpieza) Detiene el contenedor después de los tests
      # if: always() asegura que este paso se ejecute incluso si los tests fallan
      - name: Detener contenedor Docker
        if: always()
        run: docker stop mi-api-container